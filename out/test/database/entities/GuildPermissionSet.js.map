{"version":3,"file":"GuildPermissionSet.js","sourceRoot":"./src/","sources":["test/database/entities/GuildPermissionSet.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA6D;AAC7D,qCAAyC;AAGzC,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,cAAQ;IAmB5C,IAAI,IAAI;QACJ,OAAO;YACH,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;SAC9C,CAAC;IACN,CAAC;IAED,SAAS,CAAC,MAAyB,EAAE,GAAG,GAAa;QACjD,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,SAAS,CAAC,MAAyB,EAAE,GAAG,GAAa;QACjD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACxD,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAY;QACrB,IAAI,CAAC,IAAI;YAAE,OAAO;QAElB,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACxC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACxC;QAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACzC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACtC;IACL,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,IAAY;QACtB,IAAI,CAAC,IAAI;YAAE,OAAO;QAElB,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACxC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACxC;QAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACzC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACtC;IACL,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAY;QACrB,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;CACJ,CAAA;AA7EG;IADC,gBAAM,EAAE;;iDACK;AAGd;IADC,gBAAM,EAAE;;gDACI;AAGb;IADC,gBAAM,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;;iDAChB;AAGhB;IADC,gBAAM,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;;mDACd;AAGlB;IADC,gBAAM,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;;8DACH;AAG7B;IADC,gBAAM,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;;8DACH;AAjBpB,kBAAkB;IAD9B,gBAAM,EAAE;GACI,kBAAkB,CA+E9B;AA/EY,gDAAkB","sourcesContent":["import { DBEntity, PermissionSetEntity } from \"../../../src\";\nimport { Entity, Column } from \"typeorm\";\n\n@Entity()\nexport class GuildPermissionSet extends DBEntity implements PermissionSetEntity {\n    @Column()\n    guild: string;\n\n    @Column()\n    name: string;\n\n    @Column(\"text\", { array: true })\n    roles: string[];\n\n    @Column(\"text\", { array: true })\n    members: string[];\n\n    @Column(\"text\", { array: true })\n    grantedPermissions: string[];\n\n    @Column(\"text\", { array: true })\n    negatedPermissions: string[];\n\n    get json() {\n        return {\n            guild: this.guild,\n            name: this.name,\n            roles: this.roles,\n            members: this.members,\n            grantedPermissions: this.grantedPermissions,\n            negatedPermissions: this.negatedPermissions\n        };\n    }\n    \n    delTarget(target: \"member\" | \"role\", ...ids: string[]) {\n        ids.forEach(id => this[target + \"s\"].remove(id));\n    }\n\n    addTarget(target: \"member\" | \"role\", ...ids: string[]) {\n        ids = ids.filter(id => !!id);\n        this[target + \"s\"] = this[target + \"s\"].concat(ids);\n    }\n\n    /**\n     * Grant a permission to the set, automatically un-negating it if it is negated.\n     * @param node the node to grant\n     */\n    public grant(node: string) {\n        if (!node) return;\n\n        if (this.negatedPermissions.includes(node)) {\n            this.negatedPermissions.remove(node);\n        }\n\n        if (!this.grantedPermissions.includes(node)) {\n            this.grantedPermissions.push(node);\n        }\n    }\n\n    /**\n     * Negate a permission from the set, automatically un-granting it if it is granted.\n     * @param node the node to negate\n     */\n    public negate(node: string) {\n        if (!node) return;\n\n        if (this.grantedPermissions.includes(node)) {\n            this.grantedPermissions.remove(node);\n        }\n\n        if (!this.negatedPermissions.includes(node)) {\n            this.negatedPermissions.push(node);\n        }\n    }\n\n    /**\n     * Reset a permission in the set\n     * @param node the node to reset\n     */\n    public reset(node: string) {\n        this.grantedPermissions.remove(node);\n        this.negatedPermissions.remove(node);\n    }\n}"]}