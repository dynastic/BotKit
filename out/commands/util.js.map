{"version":3,"file":"util.js","sourceRoot":"./src/","sources":["commands/util.ts"],"names":[],"mappings":"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","sourcesContent":["import \"./api\";\n\nimport fs from \"fs-extra\";\nimport path, { resolve } from \"path\";\nimport {Collection, Guild, Message, RichEmbed, RichEmbedOptions} from \"discord.js\";\nimport {CommandError} from \"./errors\";\nimport Application from \"..\";\nimport { BOT_ICON, BOT_AUTHOR } from \"../Constants\";\n\nexport enum AccessLevel {\n    EVERYONE = \"global\",\n    MODERATOR = \"moderator\",\n    ADMIN = \"admin\",\n    ROOT = \"root\"\n}\n\ndeclare module 'discord.js' {\n    interface GuildMember {\n        /**\n         * Whether this member has access to the given command\n         * @param command the command name\n         */\n        hasAccess(command: string): Promise<boolean>;\n    }\n\n    interface User {\n        /**\n         * Whether this user has access to the given command\n         * @param command the command name\n         */\n        hasAccess(command: string): Promise<boolean>;\n        /**\n         * Returns all visible guilds this user is in\n         */\n        guilds(): Promise<Collection<string, Guild>>;\n    }\n\n    interface Message {\n        /**\n         * Reacts with a success emoji\n         */\n        complete(): Promise<void>;\n        /**\n         * Reacts with a success emoji\n         */\n        success(): Promise<void>;\n        /**\n         * Reacts with a success emoji\n         */\n        done(): Promise<void>;\n        /**\n         * Reacts with a failure emoji\n         */\n        fail(): Promise<void>;\n        /**\n         * \n         */\n        reject(error?: CommandError | undefined): Promise<void>;\n        /**\n         * Reacts with a warning indicator\n         */\n        warning(): Promise<void>;\n        /**\n         * Reacts with a warning indicator\n         */\n        caution(): Promise<void>;\n        /**\n         * Reacts with a warning indicator\n         */\n        danger(): Promise<void>;\n        /**\n         * The arguments provided for this command\n         */\n        args: string[];\n        /**\n         * The command being executd by this message\n         */\n        command: Command;\n        /**\n         * The app\n         */\n        app: Application;\n        /**\n         * Whether this message is executing a command\n         */\n        isCommand: boolean;\n        /**\n         * Command data store\n         */\n        data: {\n            [key: string]: any;\n        };\n    }\n}\n\nexport interface CommandHandler {\n    (message: Message, next: (err?: any) => any): any;\n}\n\nexport interface CommandOptions {\n    access?: AccessLevel;\n    guards?: CommandHandler[];\n    category?: string;\n}\n\nexport interface Command {\n    opts: {\n        name: string;\n        enabled?: boolean;\n        aliases?: string[];\n        /**\n         * Storage for guards and command states\n         */\n        data?: {[key: string]: any};\n    } & CommandOptions;\n    handler: CommandHandler;\n}\n\nexport interface Commands {\n    opts?: CommandOptions;\n    commands: Array<Command | Commands>;\n}\n\nexport namespace CommandUtils {\n    export function isCommandOptions(options: any): options is CommandOptions {\n        return typeof options === \"undefined\" ? true :\n            (typeof options.access === \"undefined\" || typeof options.access === \"number\") &&\n            (typeof options.guards === \"undefined\" || (Array.isArray(options.guards) && (options.guards as any[]).every(guard => typeof guard === \"function\")))\n    }\n    \n    export function isCommand(command: any): command is Command {\n        return typeof command.opts === \"object\" &&\n               typeof command.opts.name === \"string\" &&\n               (typeof command.opts.enabled === \"boolean\" || typeof command.opts.enabled === \"undefined\") &&\n               isCommandOptions(command.options) &&\n               typeof command.handler === \"function\";\n    }\n    \n    export function isCommands(commands: any): commands is Commands {\n        return (typeof commands.opts === \"undefined\" || isCommandOptions(commands.opts)) &&\n               (typeof commands.commands === \"object\" && Array.isArray(commands.commands));\n    }\n\n    /**\n     * Flattens a commands object into a command array\n     * \n     * @param param0 the commands to flatten\n     */\n    export async function flatten({opts, commands}: Commands): Promise<Command[]> {\n        let commandArray: Command[] = [];\n\n        for (let command of commands) {\n            // prevents modifications to the require.cache'd objects\n            command = Object.assign({}, command);\n            command.opts = command.opts ? Object.assign({}, command.opts) : {};\n            if (command.opts) command.opts.guards = [...(command.opts.guards || [])];\n\n            if (!opts) {\n                isCommand(command) ? commandArray.push(command) : commandArray = commandArray.concat(await flatten(command));\n                continue;\n            }\n\n            const {guards, access, category} = opts;\n\n            // guards have a hierarchy\n            if (guards) {\n                command.opts.guards = guards.concat(command.opts.guards || []);\n            }\n\n            // commands inherit access levels if they don't have one defined\n            if (typeof access === \"number\" && typeof command.opts.access === \"undefined\") {\n                command.opts.access = access;\n            }\n\n            if (typeof category === \"string\" && typeof command.opts.category === \"undefined\") {\n                command.opts.category = category;\n            }\n\n            if (isCommand(command)) {\n                // our work is done\n                commandArray.push(command);\n            } else {\n                // recursion!\n                commandArray = commandArray.concat(await flatten(command));\n            }\n        }\n\n        return commandArray;\n    }\n\n    /**\n     * Parses a POJSO and converts it to an array of commands\n     * \n     * @param module the plain object to parse\n     */\n    export async function parse(module: any, base: boolean = true): Promise<Command[]> {\n        // exports = {opts: {}, handler: () => any}\n        if (isCommand(module)) {\n            return [module];\n        }\n\n        // exports = {opts: {}, commands: []}\n        if (module.commands) {\n            return await flatten(module);\n        }\n\n        let commands: Command[] = [];\n        if (base) {\n            for (let key in module) {\n                const value = module[key];\n                commands = commands.concat(await parse(value, false));\n            }\n        }\n        \n        return commands;\n    }\n\n    /**\n     * Parses a directory and all of it's sub-directories for commands.\n     * \n     * @param dir the path to the directory\n     */\n    export async function loadDirectory(dir: string): Promise<Command[]> {\n        let contents = await fs.readdir(dir), commands: Command[] = [];\n\n        for (let content of contents) {\n            const location = path.resolve(dir, content);\n            const stat = await fs.stat(location);\n\n            // commands must be .js files\n            if (stat.isFile() && !location.endsWith(\".js\")) continue;\n\n            commands = commands.concat(stat.isDirectory() ? await loadDirectory(location) : await parse(require(location)));\n        }\n\n        return commands;\n    }\n\n    export async function prependMiddleware(commands: Command[], ...middleware: CommandHandler[]): Promise<void> {\n        for (let command of commands) {\n            (command.opts.guards || (command.opts.guards = [])).unshift(...middleware);\n        }\n    }\n\n    export function executeMiddleware(message: Message, middleware: CommandHandler[]): Promise<void> {\n        return new Promise((resolve, reject) => {\n            let idx = -1;\n            const next = (err?: any) => {\n                if (err) {\n                    return reject(err);\n                }\n                idx++;\n                if (!middleware[idx]) return resolve();\n                middleware[idx](message, next);\n            };\n            next();\n        });\n    }\n}\n\nexport const specializeEmbed = (embed: RichEmbed | RichEmbedOptions) => {\n    if (embed instanceof RichEmbed) embed.setFooter(BOT_AUTHOR, BOT_ICON);\n    else embed.footer = {text: BOT_AUTHOR, icon_url: BOT_ICON};\n    return embed;\n};"]}