{"version":3,"file":"commands.js","sourceRoot":"/Users/ericrabil/eric.git/BotKit/src/","sources":["commands/commands.ts"],"names":[],"mappings":"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","sourcesContent":["import { Collection, Message, RichEmbed, TextChannel } from 'discord.js';\nimport util from 'util';\n\nimport { COMMAND_PREFIX } from '../Constants';\nimport {CommandError} from './errors';\nimport { Argumented } from './guards';\nimport { AccessLevel, Command, Commands } from './util';\n\nexport const HelpCommand: Command = {\n    opts: {\n        name: \"help\",\n        access: AccessLevel.EVERYONE,\n        guards: [Argumented(\"help\", \"Provides help about all commands in this bot\", [{name: \"command\", type: \"string\", required: false}])]\n    },\n    handler: async (message, next) => {\n        const [specificCommand] = message.args;\n\n        // command manpage\n        if (specificCommand) {\n            const command = message.app.commandSystem.commands[specificCommand];\n            if (!command) {\n                return next(new CommandError({message: \"That command does not exist.\"}));\n            }\n            const metadata = message.app.commandSystem.metadata[command.opts.name];\n            if (!metadata || (!metadata.description && !metadata.syntax)) {\n                return next(new CommandError({message: \"There's no additional help data for this command.\"}));\n            }\n            const {description, syntax} = metadata;\n            const embed = new RichEmbed();\n            embed.setTitle(`Information about \\`${command.opts.name}\\``);\n            if (description) embed.addField(\"Description\", description);\n            if (syntax) embed.addField(\"Syntax\", `\\`${syntax}\\``);\n            await message.reply(embed);\n            return;\n        }\n\n        const commands: {[category: string]: string[]} = {};\n        const loadedCommands = message.app.commandSystem.commands;\n\n        for (let commandName in loadedCommands) {\n            if (!(await (message.member || message.author).hasAccess(commandName))) continue;\n            const command = loadedCommands[commandName];\n            if (!command) continue;\n            const category = command.opts.category || \"General\";\n            (commands[category] || (commands[category] = [])).push(`â€¢ \\`${COMMAND_PREFIX}${command.opts.name}\\``);\n        }\n\n        const helpEmbed = new RichEmbed();\n\n        for (let category in commands) {\n            const commandList = commands[category].join(\"\\n\");\n\n            helpEmbed.addField(`${category}:`, commandList);\n        }\n\n        helpEmbed.setTitle(\"Available Commands\");\n\n        message.reply(\"\", {embed: helpEmbed});\n    }\n};\n\nexport const PingCommand: Command = {\n    opts: {\n        name: \"ping\",\n        category: \"Diagnostics\",\n        access: AccessLevel.EVERYONE,\n        guards: [Argumented(\"ping\", \"Calculates the latency between the bot and server\", [])]\n    },\n    handler: async (message, next) => {\n        const startTime = Date.now();\n\n        const msg = await message.reply(\"Ping...\") as Message;\n        \n        await msg.edit(`Ponged in ${msg.createdTimestamp - startTime}ms`);\n    }\n};\n\nexport const EvalCommand: Command = {\n    opts: {\n        name: \"eval\",\n        category: \"Diagnostics\",\n        access: AccessLevel.ROOT,\n        guards: [Argumented(\"eval\", \"Evaluates the given code\", [{name: \"code\", type: \"string\", required: true, unlimited: true}])]\n    },\n    handler: async (message, next) => {\n        const context = {\n            message,\n            app: message.app,\n            args: message.args,\n            author: message.author,\n            channel: message.channel,\n            guild: message.guild,\n            client: message.client\n        };\n\n        let res;\n        try {\n            res = eval(message.args.join(\" \"));\n        } catch (e) {\n            res = e;\n        }\n\n        const getResult = () => \"Result\\n```js\\n\" + util.inspect(res, false, 0) + \"\\n```\";\n\n        if (res instanceof Promise) {\n            const response = await message.reply(\"Promise Pending...\") as Message;\n            try {\n                res = await res;\n            } catch (e) {\n                res = e;\n            }\n\n            await response.edit(getResult());\n            return;\n        }\n\n        await message.reply(getResult());\n    }\n};\n\nexport const Moderation: Commands = {\n    opts: {\n        access: AccessLevel.MODERATOR,\n        category: \"Moderation\"\n    },\n    commands: [\n        {\n            opts: {\n                name: \"erase-channel\",\n                guards: [Argumented(\"erase-channel\", \"Erases all messages in the specified channel\", [\n                    {name: \"channel\", type: \"channel\"}\n                ])]\n            },\n            handler: async (msg, next) => {\n                let messages: Collection<string, Message>;\n                while ((messages = await (msg.args[0] as any as TextChannel).fetchMessages({limit: 100})).size > 0) {\n                    await msg.channel.bulkDelete(messages);\n                }\n                await msg.author.send(`I'm done cleaning <#${msg.channel.id}>`);\n            }\n        }\n    ]\n};\n\nexport const UnicodeEmoji: Command = {\n    opts: {\n        name: \"unicode-emoji\",\n        guards: [\n            Argumented(\n                \"unicode-emoji\",\n                \"Sends the unicode version of the given emoji where applicable\",\n                [\n                    {\n                        name: \"emoji\",\n                        type: \"string\"\n                    }\n                ]\n            )\n        ]\n    },\n    handler: msg => msg.reply(`\\\\${msg.args[0]}`)\n}"]}