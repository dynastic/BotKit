{"version":3,"file":"permissions.js","sourceRoot":"./src/","sources":["commands/guards/permissions.ts"],"names":[],"mappings":";;AAAA,sCAAyC;AAGzC;;GAEG;AACU,QAAA,gBAAgB,GAAmB,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAEpE,MAAM,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;IAEzD,wEAAwE;IACxE,IAAI,OAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI,CAAC,cAAc,IAAI,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE;QAC1F,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,eAAe,EAAE;YAC5C,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE,KAAK;SAClB,CAAC,CAAC;KACN;IAED,iBAAiB;IACjB,IAAI,OAAO,CAAC,aAAa,EAAE;QACvB,OAAO,IAAI,EAAE,CAAC;KACjB;IAED,OAAO,CAAC,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEtG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;QACxB,OAAO,IAAI,CAAC,IAAI,qBAAY,CAAC,EAAC,OAAO,EAAE,wCAAwC,EAAC,CAAC,CAAC,CAAC;KACtF;IAED,IAAI,EAAE,CAAC;AACX,CAAC,CAAA;AAED;;GAEG;AACU,QAAA,aAAa,GAAmB,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACjE,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IAEnD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;IAE/B,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAkB,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;IAExI,IAAI,CAAC,OAAO,EAAE;QACV,OAAO,IAAI,CAAC,qBAAY,CAAC,SAAS,CAAC,0CAA0C,CAAC,CAAC,CAAC;KACnF;IAED,IAAI,EAAE,CAAC;AACX,CAAC,CAAA","sourcesContent":["import { CommandError } from \"../errors\";\nimport { CommandHandler } from \"../util\";\n\n/**\n * Calculates the permissions\n */\nexport const PermissionsGuard: CommandHandler = async (message, next) => {\n\n    const { superuserCheck } = message.client.botkit.options;\n\n    // set DISABLE_PERMISSIONS to anything and permisisons will just *work*!\n    if (process.env.DISABLE_PERMISSIONS || (superuserCheck && superuserCheck(message.author.id))) {\n        Object.defineProperty(message, \"hasPermission\", {\n            value: true,\n            writable: false\n        });\n    }\n\n    // for superusers\n    if (message.hasPermission) {\n        return next();\n    }\n\n    message.hasPermission = await (message.member || message.author).hasAccess(message.command.opts.name);\n\n    if (!message.hasPermission) {\n        return next(new CommandError({message: `You do not have permission to do that.`}));\n    }\n\n    next();\n}\n\n/**\n * Loads permission sets if they are in the first argument\n */\nexport const PermSetLoader: CommandHandler = async (message, next) => {\n    const [name] = message.args.map(r => r.toString());\n\n    const guild = message.guild.id;\n\n    const permSet = message.data.permSet = await message.client.botkit.options.permissionsEntity!.findOne({ name: name.toString(), guild });\n\n    if (!permSet) {\n        return next(CommandError.NOT_FOUND(\"No permission set with that name exists.\"));\n    }\n\n    next();\n}"]}