{"version":3,"file":"permissions.js","sourceRoot":"./src/","sources":["commands/guards/permissions.ts"],"names":[],"mappings":";;AACA,qCAAoC;AACpC,gDAAgD;AAEhD;;;;GAIG;AACU,QAAA,WAAW,GAAmB,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC/D,MAAM,iBAAiB,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC;IAC1E,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;IAEtC,iBAAiB;IACjB,IAAI,OAAO,CAAC,aAAa,EAAE;QACvB,OAAO,IAAI,EAAE,CAAC;KACjB;IAED,uEAAuE;IACvE,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;IAEnD,IAAI,CAAC,iBAAiB,EAAE;QACpB,aAAM,CAAC,IAAI,CAAC,mEAAmE,CAAC,CAAC;QACjF,OAAO,IAAI,EAAE,CAAC;KACjB;IAED,6CAA6C;IAC7C,IAAI,CAAC,IAAI,EAAE;QACP,OAAO,IAAI,EAAE,CAAC;KACjB;IAED,8GAA8G;IAC9G,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;QAChB,aAAM,CAAC,KAAK,CAAC,wEAAwE,CAAC,CAAC;QACvF,OAAO,IAAI,EAAE,CAAC;KACjB;IAED,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;IAErC,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAErC,MAAM,QAAQ,GAAG,MAAM,iBAAiB,CAAC,kBAAkB,CAAC,KAAK,CAAC;SAC7D,KAAK,CAAC,uBAAuB,EAAE,EAAE,OAAO,EAAE,CAAC;SAC3C,OAAO,CAAC,oBAAoB,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;SAC3C,OAAO,EAAE,CAAC;IAEf,uDAAuD;IACvD,MAAM,GAAG,GAAG,MAAM,4BAAc,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IAElE,OAAO,CAAC,aAAa,GAAG,4BAAc,CAAC,gBAAgB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAEnE,IAAI,EAAE,CAAC;AACX,CAAC,CAAA","sourcesContent":["import { CommandHandler } from \"../util\";\nimport { Logger } from \"../../util\";\nimport { PermissionsAPI } from \"../permissions\";\n\n/**\n * Basic permissions calculation guard\n * @param message the message\n * @param next the next function\n */\nexport const Permissions: CommandHandler = async (message, next) => {\n    const PermissionsEntity = message.client.botkit.options.permissionsEntity;\n    const { node } = message.command.opts;\n\n    // for superusers\n    if (message.hasPermission) {\n        return next();\n    }\n\n    // if there's no node, hasPermission = true, otherwise default to false\n    message.hasPermission = !message.command.opts.node;\n\n    if (!PermissionsEntity) {\n        Logger.warn(\"Permissions guard was called but no PermissionsEntity is defined.\");\n        return next();\n    }\n\n    // if there's no node, stop trying to compute\n    if (!node) {\n        return next();\n    }\n\n    // we don't do permissions in a DM, it's either superuser or the command doesn't have a permission requirement\n    if (!message.guild) {\n        Logger.debug(\"Message is not from a guild. Permission computation will not continue.\");\n        return next();\n    }\n\n    const { roles, id } = message.member;\n\n    const roleIDs = roles.map(r => r.id);\n\n    const entities = await PermissionsEntity.createQueryBuilder(\"set\")\n        .where(\"set.roles @> :roleIDs\", { roleIDs })\n        .orWhere(\"set.members @> :id\", { id: [id] })\n        .getMany();\n\n    // create a composite set of all of the permission sets\n    const set = await PermissionsAPI.compositePermissionSet(entities);\n\n    message.hasPermission = PermissionsAPI.nodeSatisfiesSet(node, set);\n\n    next();\n}"]}