{"version":3,"file":"guards.js","sourceRoot":"./src/","sources":["commands/guards.ts"],"names":[],"mappings":";;;;;AAAA,qCAAsC;AACtC,iCAAqD;AAErD;;;;GAIG;AACU,QAAA,eAAe,GAAmB,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC/D,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,IAAI,kBAAW,CAAC,QAAQ,CAAC;IAC/D,IAAI,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;QAAE,OAAO,IAAI,EAAE,CAAC;IACrF,IAAI,GAAG,CAAC,aAAa;QAAE,OAAO,IAAI,EAAE,CAAC;IAErC,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,wCAAwC,CAAC,CAAC,CAAC,iBAAiB,MAAM,kCAAkC,CAAC;IAE7I,OAAO,IAAI,CAAC,IAAI,qBAAY,CAAC,EAAC,OAAO,EAAE,iBAAiB,MAAM,kCAAkC,EAAC,CAAC,CAAC,CAAC;AACxG,CAAC,CAAA;AAED,oCAA+B","sourcesContent":["import {CommandError} from './errors';\nimport { AccessLevel, CommandHandler } from './util';\n\n/**\n * Simple guard which ensures a user has a given access level\n * @param msg the message to check against\n * @param next next function\n */\nexport const PermissionGuard: CommandHandler = async (msg, next) => {\n    const access = msg.command.opts.access || AccessLevel.EVERYONE;\n    if (await (msg.member || msg.author).hasAccess(msg.command.opts.name)) return next();\n    if (msg.hasPermission) return next();\n\n    const message = msg.command.opts.node ? `You do not have permission to do that.` : `You must have ${access} clearance or higher to do that.`;\n\n    return next(new CommandError({message: `You must have ${access} clearance or higher to do that.`}));\n}\n\nexport * from \"./guards/index\";"]}