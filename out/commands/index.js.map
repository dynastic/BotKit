{"version":3,"file":"index.js","sourceRoot":"./src/","sources":["commands/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {Message} from \"discord.js\";\n\nimport * as CommandUtil from \"./util\";\nimport Constants from \"../Constants\";\nimport path from \"path\";\nimport {CommandError} from \"./errors\";\nimport Application from \"..\";\n\nimport * as Guards from \"./guards\";\nimport { isBoolean } from \"util\";\nimport { PermissionsGuard } from \"./guards/permissions\";\n\nexport interface CommandSystemOptions {\n    directory?: string;\n    preloadExclude?: string[];\n    automaticCategoryNames?: boolean;\n    app: Application;\n}\n\nconst stripStartEnd = (token: string, str: string) => {\n    if (str.startsWith(token) && str.endsWith(token)) str = str.substring(token.length, str.length - token.length);\n    return str;\n}\n\nexport interface CommandMetadata {\n    [command: string]: {\n        syntax: string | undefined;\n        description: string | undefined;\n    } | undefined;\n}\n\n/**\n * A system which loads and tracks commands\n */\nexport default class CommandSystem {\n    public commands: {[key: string]: CommandUtil.Command | undefined} = {};\n\n    /**\n     * Guards to run on all commands\n     */\n    private readonly globalGuards: CommandUtil.CommandHandler[] = [];\n\n    public constructor(private options: CommandSystemOptions) {\n        this.globalGuards = [PermissionsGuard];\n\n        options.app.client.on(\"message\", message => this.messageIntake(message));\n    }\n\n    public async messageIntake(message: Message) {\n        if (typeof message.isCommand === \"undefined\") {\n            message.isCommand = message.content.startsWith(Constants.COMMAND_PREFIX);\n        }\n\n        if (!message.isCommand) return;\n    \n        if (!message.args) {\n            message.args = message.content.substring(Constants.COMMAND_PREFIX.length).trim().match(Constants.ARGUMENT_REGEX) as string[] || [];\n            for (let i = 0; i < message.args.length; i++) {\n                message.args[i] = stripStartEnd('\"', message.args[i] as string);\n                message.args[i] = stripStartEnd(\"'\", message.args[i] as string);\n            }\n        }\n\n        if (message.args.length === 0) return;\n    \n        if (!message.command) {\n            message.command = this.options.app.commandSystem.commands[message.args[0] as string]!;\n            message.args.shift();\n        }\n\n        if (!message.cleanContent.startsWith(Constants.COMMAND_PREFIX)) return;\n        await this.executeCommand(message);\n    }\n\n    /**\n     * Loads commands into the tracking system\n     */\n    public async init(): Promise<void> {\n        let commands = this.options.directory ? await CommandUtil.CommandUtils.loadDirectory(this.options.directory, this.options.automaticCategoryNames) : [];\n        commands = commands.concat(await CommandUtil.CommandUtils.parse(require(path.resolve(__dirname, \"commands\"))));\n        await this.loadCommands(commands);\n    }\n\n    public async loadCommands(commands: CommandUtil.Command[] | CommandUtil.Commands): Promise<void> {\n        if (!Array.isArray(commands)) {\n            commands = await CommandUtil.CommandUtils.flatten(commands);\n        }\n\n        await CommandUtil.CommandUtils.preloadMetadata(commands);\n\n        for (let command of commands) {\n            if (this.options.preloadExclude && this.options.preloadExclude.includes(command.opts.name)) continue;\n            this.commands[command.opts.name] = command;\n            if (command.opts.aliases) {\n                for (let alias of command.opts.aliases) {\n                    this.commands[alias] = command;\n                }\n            }\n        }\n    }\n\n    /**\n     * Executes the command initiated by the message\n     * @param message the message initiating a command\n     */\n    public async executeCommand(message: Message): Promise<void> {\n        const sendError = async (error: any) => {\n            if (!error) return;\n            if (error instanceof CommandError) {\n                return await message.renderError(error);\n            }\n            /**\n             * @todo tracking\n             */\n            console.error(error);\n            await message.renderError(CommandError.GENERIC({}));\n        };\n        const command = message.command;\n        if (!command || command.opts.enabled === false) {\n            await message.renderError(new CommandError({\n                message: `That command doesn't exist! Try \\`${Constants.COMMAND_PREFIX}help\\` for a list of commands.`,\n                title: \"Unknown command\"\n            }));\n            return;\n        }\n        try {\n            await CommandUtil.CommandUtils.executeMiddleware(message, this.globalGuards.concat(command.opts.guards || []));\n            if (message.errored) return;\n            await command.handler(message, sendError);\n        } catch (e) {\n            return await sendError(e);\n        }\n    }\n}\n\nexport * from \"./util\";\nexport * from \"./guards\";\nexport * from \"./errors\";\nexport * from \"./api\";\nexport * from \"./permissions\";"]}