{"version":3,"file":"index.js","sourceRoot":"/Users/ericrabil/eric.git/BotKit/src/","sources":["commands/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {Message} from \"discord.js\";\n\nimport * as CommandUtil from \"./util\";\nimport { COMMAND_PREFIX, ARGUMENT_REGEX, SUCCESS_EMOJI, FAIL_EMOJI, WARNING_EMOJI } from \"../Constants\";\nimport path from \"path\";\nimport {CommandError} from \"./errors\";\nimport Application, { RoleOptions } from \"..\";\nimport { PermissionGuard } from \"./guards\";\n\nexport interface CommandSystemOptions {\n    directory: string;\n    app: Application;\n    roles: RoleOptions;\n}\n\nconst stripStartEnd = (token: string, str: string) => {\n    if (str.startsWith(token) && str.endsWith(token)) str = str.substring(token.length, str.length - token.length);\n    return str;\n}\n\nexport interface CommandMetadata {\n    [command: string]: {\n        syntax: string | undefined;\n        description: string | undefined;\n    } | undefined;\n}\n\nexport default class CommandSystem {\n    public commands: {[key: string]: CommandUtil.Command | undefined} = {};\n    public metadata: CommandMetadata = {};\n    \n    private readonly globalGuards: CommandUtil.CommandHandler[] = [];\n\n    public constructor(private options: CommandSystemOptions) {\n        this.globalGuards = [];\n        options.app.client.on(\"message\", message => {\n            if (typeof message.isCommand === \"undefined\") {\n                message.isCommand = message.content.startsWith(COMMAND_PREFIX);\n            }\n\n            if (!message.complete) {\n                message.success = message.done = message.complete = function(this: Message) {\n                    return this.react(SUCCESS_EMOJI) as any as Promise<void>;\n                }\n            }\n\n            if (!message.warning) {\n                message.danger = message.caution = message.warning = function(this: Message) {\n                    return this.react(WARNING_EMOJI) as any as Promise<void>;\n                }\n            }\n        \n            if (!message.fail) {\n                message.fail = function(this: Message) {\n                    return this.react(FAIL_EMOJI) as any as Promise<void>;\n                }\n            }\n        \n            if (!message.args && message.isCommand) {\n                message.args = message.content.substring(COMMAND_PREFIX.length).trim().match(ARGUMENT_REGEX) as string[];\n                for (let i = 0; i < message.args.length; i++) {\n                    message.args[i] = stripStartEnd('\"', message.args[i]);\n                    message.args[i] = stripStartEnd(\"'\", message.args[i]);\n                }\n            }\n        \n            if (!message.command && message.isCommand) {\n                message.command = options.app.commandSystem.commands[message.args[0]]!;\n                message.args.shift();\n            }\n        \n            if (!message.reject) {\n                message.reject = function(this: Message, error) {\n                    const {render} = error || CommandError.GENERIC({});\n                    return this.reply(typeof render === \"string\" ? render : \"\", {embed: typeof render === \"object\" ? render : undefined}) as any as Promise<void>;\n                }\n            }\n        \n            if (!message.app) {\n                message.app = options.app;\n            }\n        });\n    }\n\n    public async init(): Promise<void> {\n        let commands = await CommandUtil.CommandUtils.loadDirectory(this.options.directory);\n        commands = commands.concat(await CommandUtil.CommandUtils.parse(require(path.resolve(__dirname, \"commands\"))));\n        await CommandUtil.CommandUtils.prependMiddleware(commands, PermissionGuard);\n\n        for (let command of commands) {\n            this.commands[command.opts.name] = command;\n            if (command.opts.aliases) {\n                for (let alias of command.opts.aliases) {\n                    this.commands[alias] = command;\n                }\n            }\n        }\n    }\n\n    public async executeCommand(message: Message): Promise<void> {\n        const sendError = async (error: any) => {\n            if (!error) return;\n            if (!message.reject) message.reject = (err = CommandError.GENERIC({})) => {\n                const render = err.render;\n                return message.reply(typeof render === \"string\" ? render : \"\", {embed: typeof render === \"object\" ? render : undefined}) as any as Promise<void>\n            };\n            if (error instanceof CommandError) {\n                return await message.reject(error);\n            }\n            /**\n             * @todo tracking\n             */\n            console.error(error);\n            await message.reject(CommandError.GENERIC({}));\n        };\n        try {\n            await CommandUtil.CommandUtils.executeMiddleware(message, this.globalGuards);\n        } catch (e) {\n            return await sendError(e);\n        }\n        const command = message.command;\n        if (!command || command.opts.enabled === false) {\n            await message.reject(new CommandError({\n                message: `That command doesn't exist! Try \\`${COMMAND_PREFIX}help\\` for a list of commands.`,\n                title: \"Unknown command\"\n            }));\n            return;\n        }\n        try {\n            if (command.opts.guards) {\n                await CommandUtil.CommandUtils.executeMiddleware(message, command.opts.guards);\n            }\n            await command.handler(message, sendError);\n        } catch (e) {\n            return await sendError(e);\n        }\n    }\n}\n\nexport * from \"./util\";\nexport * from \"./guards\";\nexport * from \"./errors\";\nexport * from \"./commands\";\nexport * from \"./api\";"]}