{"version":3,"file":"util.js","sourceRoot":"./src/","sources":["commands/permissions/util.ts"],"names":[],"mappings":";;AAAA;;;;;GAKG;AACH,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;IAC/D,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;IACjF,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IACjB,OAAO,CAAC,CAAC;AACb,CAAC,EAAE,EAAc,CAAC,CAAC;AAEnB;;;;;;GAMG;AACH,SAAS,aAAa,CAAC,IAAY,EAAE,cAAsB;IACvD,IAAI,IAAI,KAAK,cAAc;QAAE,OAAO,IAAI,CAAC;IAEzC,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IACrC,MAAM,mBAAmB,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;IAErD,8BAA8B;IAC9B,oCAAoC;IAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC3C,IAAI,mBAAmB,CAAC,CAAC,CAAC,KAAK,GAAG;YAAE,OAAO,IAAI,CAAC;QAChD,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,mBAAmB,CAAC,CAAC,CAAC;YAAE,OAAO,KAAK,CAAC;KACjE;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;AACzC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;AAC3C,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;AAC3C,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;AACzC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;AAC7C,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;AAC3C,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;AAC/C,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;AAE7C,SAAgB,YAAY,CAAC,KAAa,EAAE,KAAa;IACrD,OAAO,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACtE,CAAC;AAFD,oCAEC","sourcesContent":["/**\n * Converts a node string to an array of its components\n * @param node the node stirng to collapse\n * \n * 'a.b.c.d.e' => ['a', 'a.b', 'a.b.c', 'a.b.c.d', 'a.b.c.d.e']\n */\nconst collapse = (node: string) => node.split('.').reduce((a, c) => {\n    const base = typeof a[a.length - 1] === 'undefined' ? '' : `${a[a.length - 1]}.`;\n    a.push(base + c);\n    return a;\n}, [] as string[]);\n\n/**\n * Determines whether a node satisfies another node\n * @param node the node to test\n * @param satisfyingNode the node to use in testing\n * \n * checks for wildcards and for literal matches\n */\nfunction _nodesSatisfy(node: string, satisfyingNode: string): boolean {\n    if (node === satisfyingNode) return true;\n\n    const collapsedNode = collapse(node);\n    const collapsedSatisfying = collapse(satisfyingNode);\n\n    // console.log(collapsedNode);\n    // console.log(collapsedSatisfying);\n\n    for (let i = 0; i < collapsedNode.length; i++) {\n        if (collapsedSatisfying[i] === '*') return true;\n        if (collapsedNode[i] !== collapsedSatisfying[i]) return false;\n    }\n\n    return true;\n}\n\nconsole.log(_nodesSatisfy('a.b.c', '*'));\nconsole.log(_nodesSatisfy('a.b.c', 'fty'));\nconsole.log(_nodesSatisfy('a.b.c', 'a.*'));\nconsole.log(_nodesSatisfy('a.b.c', 'a'));\nconsole.log(_nodesSatisfy('a.b.c', 'a.b.*'));\nconsole.log(_nodesSatisfy('a.b.c', 'a.b'));\nconsole.log(_nodesSatisfy('a.b.c', 'a.b.c.*'));\nconsole.log(_nodesSatisfy('a.b.c', 'a.b.c'));\n\nexport function nodesSatisfy(node1: string, node2: string): boolean {\n    return _nodesSatisfy(node1, node2) || _nodesSatisfy(node2, node1);\n}"]}