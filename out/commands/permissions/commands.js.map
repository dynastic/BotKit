{"version":3,"file":"commands.js","sourceRoot":"./src/","sources":["commands/permissions/commands.ts"],"names":[],"mappings":"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","sourcesContent":["import { EnvironmentGuard } from \"../guards/Environment\";\n\nimport { inspect } from \"util\";\nimport { Argumented } from \"../guards\";\nimport { PermissionSetEntity } from \"./types\";\nimport { AccessLevel, CommandHandler, Command, Commands } from \"../util\";\nimport { CommandError } from \"../errors\";\n\nconst PermissionsAccessLevel = AccessLevel.ADMIN;\n\nconst PermSetLoader: CommandHandler = async (message, next) => {\n    const [name] = message.args.map(r => r.toString());\n\n    const guild = message.guild.id;\n\n    const permSet = message.data.permSet = await message.client.botkit.options.permissionsEntity!.findOne({ name: name.toString(), guild });\n\n    if (!permSet) {\n        return next(CommandError.NOT_FOUND(\"No permission set with that name exists.\"));\n    }\n\n    next();\n}\n\n/**\n * Command builder for a membership target modifier\n * @param target role or member\n * @param state add or remove\n */\nconst TargetModifier: (target: \"role\" | \"member\", state: \"add\" | \"del\") => Command = (target, state) => ({\n    opts: {\n        name: `${state}-${target}-pset`,\n        node: \"perm.manage-members\",\n        access: PermissionsAccessLevel,\n        guards: [\n            // ternary stuff in interpolation is for grammar\n            Argumented(`${state}-${target}-pset`, `${state === \"add\" ? \"Add\" : \"Remove\"} ${target}s ${state === \"add\" ? \"to\" : \"from\"} a permission set`, [\n                {\n                    type: \"string\",\n                    name: \"pset-name\",\n                    required: true\n                },\n                {\n                    type: \"string\",\n                    name: `${target}-ids`,\n                    required: true,\n                    unlimited: true\n                }\n            ]),\n            PermSetLoader\n        ]\n    },\n    handler: async (message, next) => {\n        const [, ...ids] = message.args.map(i => i.toString());\n\n        const permSet: PermissionSetEntity = message.data.permSet;\n\n        // addTarget() or delTarget()\n        permSet[state + \"Target\"](target, ...ids);\n\n        await permSet.save();\n        await message.success();\n        next();\n    }\n});\n\n/**\n * Command builder for a permission state modifier\n * @param action the permission action\n */\nconst PermissionStateModifier: (action: \"grant\" | \"negate\" | \"reset\") => Command = action => ({\n    opts: {\n        name: `${action}-perm`,\n        node: \"perm.manage-perm\",\n        access: PermissionsAccessLevel,\n        guards: [\n            // ternary stuff in interpolation is for grammar\n            Argumented(`${action}-perm`, `${action.capitalize()} a permission ${action === \"negate\" ? \"from\" : \"in\"} a permission set`, [\n                {\n                    type: \"string\",\n                    name: \"name\",\n                    required: true\n                },\n                {\n                    type: \"string\",\n                    name: \"permissions\",\n                    required: true,\n                    unlimited: true\n                }\n            ]),\n            PermSetLoader\n        ]\n    },\n    handler: async (message, next) => {\n        const [, ...permissions] = message.args.map(p => p.toString());\n\n        const permSet: PermissionSetEntity = message.data.permSet;\n\n        // calls permSet.grant(), permSet.negate(), permSet.reset() depending on action variable\n        permissions.forEach(permission => permSet[action](permission));\n\n        await permSet.save();\n        await message.success();\n    }\n})\n\nexport const PermissionsCommands: Commands = {\n    opts: {\n        guards: [EnvironmentGuard(['text'])]\n    },\n    commands: [\n        {\n            opts: {\n                name: \"create-pset\",\n                node: \"perm.create-pset\",\n                access: PermissionsAccessLevel,\n                guards: [\n                    Argumented(\"create-pset\", \"Create a permission set\", [\n                        {\n                            type: \"string\",\n                            name: \"name\",\n                            required: true\n                        }\n                    ])\n                ]\n            },\n            /**\n             * Creates a bare permission set\n             */\n            handler: async (message, next) => {\n                const [name] = message.args;\n                const guild = message.guild.id;\n\n                if (!(await message.client.botkit.options.permissionsEntity!.isNameFree(name.toString(), guild))) {\n                    return next(new CommandError({\n                        title: \"Name Unavailable\",\n                        message: `The name \\`${name}\\` is already taken. Please choose another name.`\n                    }));\n                }\n\n                const permSet = await message.client.botkit.options.permissionsEntity!.create({\n                    guild,\n                    name: name.toString(),\n                    roles: [],\n                    members: [],\n                    grantedPermissions: [],\n                    negatedPermissions: []\n                });\n\n                const id = await permSet.save().then(set => set.id);\n\n                await message.reply(`Permission set created. Name: \\`${name}\\``);\n                next();\n            }\n        },\n        {\n            opts: {\n                name: \"get-pset\",\n                node: \"perm.get-pset\",\n                access: PermissionsAccessLevel,\n                guards: [\n                    Argumented(\"get-pset\", \"Get a permission set\", [\n                        {\n                            type: \"string\",\n                            name: \"name\",\n                            required: true\n                        }\n                    ]),\n                    PermSetLoader\n                ]\n            },\n            /**\n             * Returns a raw util.inspect() of the permission set\n             */\n            handler: async (message, next) => {\n                const permSet: PermissionSetEntity = message.data.permSet;\n\n                const description = inspect(permSet.json, false, 1);\n\n                await message.reply(`\\`\\`\\`js\\n${description}\\n\\`\\`\\``);\n\n                next();\n            }\n        },\n        TargetModifier(\"role\", \"add\"),\n        TargetModifier(\"role\", \"del\"),\n        TargetModifier(\"member\", \"add\"),\n        TargetModifier(\"member\", \"del\"),\n        PermissionStateModifier(\"grant\"),\n        PermissionStateModifier(\"negate\"),\n        PermissionStateModifier(\"reset\")\n    ]\n}"]}