{"version":3,"file":"node-additions.js","sourceRoot":"./src/","sources":["node-additions.ts"],"names":[],"mappings":";AAUA,MAAM,CAAC,SAAS,CAAC,UAAU,GAAG;IAC1B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,CAAC,SAAS,CAAC,GAAG,GAAG,UAAS,GAAG;IAC/B,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;AAC/C,CAAC,CAAC;AAEF,MAAM,CAAC,SAAS,CAAC,gBAAgB,GAAG,UAAS,GAAG;IAC5C,OAAO,IAAI,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,WAAW,EAAE,CAAC;AACpD,CAAC,CAAA;AAUD,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,KAAK,EAAE,KAAK;IAC1C,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/C,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;KAC9B;AACL,CAAC,CAAC;AAEF,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,CAAC;IAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAE9B,IAAI,KAAK,KAAK,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IAE9B,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAEtB,OAAO,CAAC,CAAC;AACb,CAAC,CAAC;AAEF,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG;IACrB,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC;AAEF,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG;IACrB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC;AAC5E,CAAC,CAAC;AAEF,KAAK,CAAC,SAAS,CAAC,UAAU,GAAG;IACzB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC;AAC5E,CAAC,CAAC","sourcesContent":["declare interface String {\n    capitalize(): string;\n    /**\n     * Returns an alternate value if this string is empty\n     * @param alt the alternate value\n     */\n    alt<T>(alt: T): this | T;\n    equalsIgnoreCase(str: string): boolean;\n}\n\nString.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\nString.prototype.alt = function(alt) {\n    return this.trim().length > 1 ? this : alt;\n};\n\nString.prototype.equalsIgnoreCase = function(str) {\n    return this.toLowerCase() === str.toLowerCase();\n}\n\ndeclare interface Array<T> {\n    insert(startIndex: number, items: T[]): void;\n    remove(o: T): T;\n    random(): T;\n    dedupe(): T[];\n    duplicates(): T[];\n}\n\nArray.prototype.insert = function(index, items) {\n    for (let i = index; i < index + items.length; i++) {\n        this[i] = items[i - index];\n    }\n};\n\nArray.prototype.remove = function(o) {\n    const index = this.indexOf(o);\n\n    if (index === -1) return this;\n\n    this.splice(index, 1);\n\n    return o;\n};\n\nArray.prototype.random = function() {\n    return this[Math.floor(Math.random() * this.length)];\n};\n\nArray.prototype.dedupe = function() {\n    return this.filter((value, index, arr) => arr.indexOf(value) === index);\n};\n\nArray.prototype.duplicates = function() {\n    return this.filter((value, index, arr) => arr.indexOf(value) !== index);\n};"]}