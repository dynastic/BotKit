{"version":3,"file":"util.js","sourceRoot":"./src/","sources":["util.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,oDAA4B;AAC5B,8DAAgC;AAChC,oEAAwC;AACxC,iDAAmC;AAEnC,MAAM,MAAM,GAAG,IAAI,qBAAK,CAAC,EAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,SAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,aAAa,EAAC,CAAC,CAAC;AAE5G,IAAiB,QAAQ,CAsBxB;AAtBD,WAAiB,QAAQ;IACrB;;OAEG;IACH,SAAgB,SAAS;QACrB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE;gBACpB,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,wBAAU,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IANe,kBAAS,YAMxB,CAAA;IACD;;;OAGG;IACH,SAAgB,MAAM,CAAC,MAAc;QACjC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,gBAAM,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,UAAS,GAAG,EAAE,MAAM;gBAC/C,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAA;IACN,CAAC;IANe,eAAM,SAMrB,CAAA;AACL,CAAC,EAtBgB,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAsBxB;AAED,IAAiB,aAAa,CAS7B;AATD,WAAiB,aAAa;IAC1B;;OAEG;IACH,SAAgB,eAAe;QAC3B,IAAI,MAAM,GAAsD,EAAE,CAAC;QACnE,MAAM,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,GAAG,OAAO,CAAC,CAAC;QAC/D,OAAO,MAAa,CAAC;IACzB,CAAC;IAJe,6BAAe,kBAI9B,CAAA;AACL,CAAC,EATgB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAS7B;AAEY,QAAA,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC;IACrC,UAAU,EAAE;QACR,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;YAC3B,KAAK,EAAE,OAAO;YACd,gBAAgB,EAAE,KAAK;YACvB,IAAI,EAAE,KAAK;YACX,QAAQ,EAAE,IAAI;SACjB,CAAC;KACL;IACD,WAAW,EAAE,KAAK;CACrB,CAAC,CAAC","sourcesContent":["import crypto from \"crypto\";\nimport flake from \"flake-idgen\";\nimport uintformat from \"biguint-format\";\nimport * as winston from \"winston\";\n\nconst flaker = new flake({id: Number.parseInt(process.env.SERVER_ID as string) || 0, epoch: 1514764800000});\n\nexport namespace Security {\n    /**\n     * Creates a unique snowflake\n     */\n    export function snowflake(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            flaker.next((err, id) => {\n                err ? reject(err) : resolve(uintformat(id, 'dec'));\n            });\n        });\n    }\n    /**\n     * Creates a secure random string of a given length\n     * @param length the length\n     */\n    export function random(length: number): Promise<string> {\n        return new Promise((resolve, reject) => {\n            crypto.randomBytes(length / 2, function(err, buffer) {\n                err ? reject(err) : resolve(buffer.toString(\"hex\"));\n            });\n        })\n    }\n}\n\nexport namespace Miscellaneous {\n    /**\n     * Returns an object with a promise and a callback\n     */\n    export function callbackPromise(): {cb: () => void, promise: Promise<void>} {\n        let struct: Partial<{cb: () => void, promise: Promise<void>}> = {};\n        struct.promise = new Promise((resolve) => struct.cb = resolve);\n        return struct as any;\n    }\n}\n\nexport const Logger = new winston.Logger({\n    transports: [\n        new winston.transports.Console({\n            level: \"debug\",\n            handleExceptions: false,\n            json: false,\n            colorize: true,\n        }),\n    ],\n    exitOnError: false,\n});"]}