{"version":3,"file":"group-manager.js","sourceRoot":"./src/","sources":["modules/group-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { GuildMember, RichEmbed, Role } from \"discord.js\";\nimport { AccessLevel, Command, CommandError, Commands, PermissionsAPI, PermissionSet, PermissionSetEntity } from \"../\";\nimport { CommandUtils } from \"../commands\";\nimport { EnvironmentGuard, PermSetLoader } from \"../commands/guards\";\nimport { calculateInclusiveRoles } from \"../util\";\n\nconst accessPriority = {\n    EVERYONE: 0,\n    MODERATOR: 1,\n    ADMIN: 2,\n    ROOT: 3,\n    global: 0,\n    moderator: 1,\n    admin: 2,\n    root: 3\n};\n\nfunction determineAccessLevel(id: string): AccessLevel {\n    let access = AccessLevel.EVERYONE;\n\n    const ROLES_INCLUSIVE = calculateInclusiveRoles();\n\n    const isRoot = ROLES_INCLUSIVE.root.includes(id);\n    const isAdmin = ROLES_INCLUSIVE.admin.includes(id);\n    const isMod = ROLES_INCLUSIVE.moderator.includes(id);\n\n    if (isRoot) access = AccessLevel.ROOT;\n    else if (isAdmin && accessPriority[access] < accessPriority.ADMIN) access = AccessLevel.ADMIN;\n    else if (isMod && accessPriority[access] < accessPriority.MODERATOR) access = AccessLevel.MODERATOR;\n\n    return access;\n}\n\ninterface PermSetContainer { permSet: PermissionSetEntity }\n\nconst fallbackStr = (str1: string, str2: string) => str1.trim().length > 0 ? str1 : str2;\n\nconst createPermissionDepictionEmbed = (sets: PermissionSetEntity | PermissionSetEntity[], target: Role | GuildMember) => {\n    let set: PermissionSet;\n\n    if (Array.isArray(sets)) {\n        set = PermissionsAPI.compositePermissionSet(sets);\n    } else {\n        set = sets[0];\n    }\n\n    let access: AccessLevel = AccessLevel.EVERYONE;\n\n    if (target instanceof Role) {\n        access = determineAccessLevel(target.id);\n    } else {\n        const roleIDs = target.roles.map(role => role.id);\n\n        roleIDs.forEach(id => {\n            const accessLevel = determineAccessLevel(id);\n\n            if (accessPriority[accessLevel] > accessPriority[access]) access = accessLevel;\n        });\n    }\n\n    if (access === 'global') {\n        access = 'basic' as any;\n    }\n\n    const embed = new RichEmbed();\n    embed.addField(\"Access Level\", access.capitalize(), true);\n\n    if (target instanceof GuildMember) {\n        const superuser = target.client.botkit.options.superuserCheck && target.client.botkit.options.superuserCheck(target.id);\n        embed.addField(\"Superuser\", !!superuser, true);\n    }\n\n    if (Array.isArray(sets)) {\n        const setList = sets.map(subset => `\\`${subset.name}\\``).join(\"\\n\");\n\n        embed.addField(\"Set List\", fallbackStr(setList, \"None\"), false);\n    }\n\n    const grantList = set.grantedPermissions.map(perm => `\\`${perm}\\``).join(\"\\n\");\n    const negateList = set.negatedPermissions.map(perm => `\\`${perm}\\``).join(\"\\n\");\n\n    embed.addField(\"Granted Permissions\", fallbackStr(grantList, \"None\"), true);\n    embed.addField(\"Negated Permissions\", fallbackStr(negateList, \"None\"), true);\n\n    return embed;\n}\n\nconst MemberRoleListGenerator: (type: \"members\" | \"roles\") => Command = type => ({\n    opts: {\n        name: type === \"members\" ? \"manulist\" : `man${type[0].replace('m', 'u')}list`,\n        node: \"perm.read\",\n        usage: {\n            description: `List all ${type === \"members\" ? \"users\" : type} in a set`,\n            args: [\n                {\n                    type: \"string\",\n                    name: \"name\",\n                    required: true\n                }\n            ]\n        },\n        guards: [\n            PermSetLoader\n        ]\n    },\n    handler: async message => {\n        const permSet: PermissionSetEntity = message.data.permSet;\n\n        const targetList = permSet[type].map(id => `<@${type === \"roles\" ? '&' : ''}${id}>`).join(\"\\n\");\n\n        const embed = new RichEmbed();\n        embed.setTitle(\"Permissions Query Report\");\n        embed.addField(\"Permission Set\", `\\`${permSet.name}\\``, false);\n        embed.addField(`${type === \"members\" ? \"User\" : type === \"roles\" ? \"Role\" : (type as string).capitalize()} List`, fallbackStr(targetList, \"None\"), false);\n\n        await message.reply(embed);\n    }\n});\n\nconst PermissionStateGenerator: (action: \"add\" | \"del\") => Command = action => ({\n    opts: {\n        name: `manp${action}`,\n        node: \"perm.write\",\n        usage: {\n            description: \"Updates the status of a permission in a permission set\",\n            args: [\n                {\n                    type: \"string\",\n                    name: \"permission-set\",\n                    required: true\n                },\n                {\n                    type: \"string\",\n                    name: \"permissions\",\n                    required: true,\n                    unlimited: true\n                }\n            ]\n        },\n        guards: [\n            PermSetLoader\n        ]\n    },\n    handler: async message => {\n        const [, ...permissions] = message.args as string[];\n\n        const { permSet } = message.data as PermSetContainer;\n\n        console.log(permissions);\n\n        permissions.forEach(permission => {\n            let targetNegated: boolean = false;\n\n            if (permission.startsWith(\"-\") || permission.startsWith(\"!\")) {\n                targetNegated = true;\n                permission = permission.substring(1);\n            }\n\n            if (action === \"add\") {\n                if (targetNegated) {\n                    permSet.negate(permission);\n                } else {\n                    permSet.grant(permission);\n                }\n            } else {\n                if (targetNegated) {\n                    permSet.negatedPermissions.remove(permission);\n                } else {\n                    permSet.grantedPermissions.remove(permission);\n                }\n            }\n        });\n\n        await permSet.save();\n        await message.success();\n    }\n})\n\nconst membershipStateGenerator: (type: \"member\" | \"role\", mode: \"add\" | \"del\") => Command = (type, mode) => ({\n    opts: {\n        // manuadd\n        // manudel\n        // manradd\n        // manrdel\n        name: `man${type[0].replace('m', 'u')}${mode}`,\n        node: \"perm.write\",\n        usage: {\n            description: `${mode.capitalize().replace(\"Del\", \"Remove\")} a ${type} ${mode === \"add\" ? \"to\" : \"from\"} a permission set`,\n            args: [\n                {\n                    type: \"string\",\n                    name: \"name\",\n                    required: true\n                },\n                {\n                    type,\n                    name: type,\n                    required: true,\n                    unlimited: true\n                }\n            ]\n        },\n        guards: [\n            PermSetLoader\n        ]\n    },\n    handler: async (message) => {\n        let ids = message.args.slice(1) as Array<GuildMember | Role>;\n        ids = ids.filter((id: null | { id: string }) => id !== null && id.id);\n        const { permSet } = message.data as PermSetContainer;\n\n        await Promise.all(ids.map(({ id }) => permSet[mode + \"Target\"](type, id)));\n\n        await permSet.save();\n\n        await message.success();\n    }\n})\n\nexport const GroupManager: Commands = {\n    opts: {\n        access: AccessLevel.ADMIN,\n        category: \"Group Manager\",\n        guards: [\n            EnvironmentGuard(['text'])\n        ]\n    },\n    commands: [\n        {\n            opts: {\n                name: \"mansget\",\n                node: \"perm.read\",\n                usage: {\n                    description: \"Get a permission set\",\n                    args: [\n                        {\n                            type: \"string\",\n                            name: \"name\",\n                            required: true\n                        }\n                    ]\n                },\n                guards: [\n                    PermSetLoader\n                ]\n            },\n            handler: async (message, next) => {\n                const permSet: PermissionSetEntity = message.data.permSet;\n\n                const embed = new RichEmbed();\n                embed.addField(\"Name\", permSet.name, false);\n                embed.addField(\"Roles\", fallbackStr(permSet.roles.map(id => `<@&${id}>`).join(\"\\n\"), \"None\"), true);\n                embed.addField(\"Members\", fallbackStr(permSet.members.map(id => `<@${id}>`).join(\"\\n\"), \"None\"), true);\n                embed.addField(\"Granted Permissions\", fallbackStr(permSet.grantedPermissions.map(perm => `\\`${perm}\\``).join(\"\\n\"), \"None\"), false);\n                embed.addField(\"Negated Permissions\", fallbackStr(permSet.negatedPermissions.map(perm => `\\`${perm}\\``).join(\"\\n\"), \"None\"), false);\n\n                await message.reply(embed);\n            }\n        },\n        {\n            opts: {\n                name: \"mansadd\",\n                node: \"perm.write\",\n                usage: {\n                    description: \"Add a permission set\",\n                    args: [\n                        {\n                            type: \"string\",\n                            name: \"name\",\n                            required: true\n                        }\n                    ]\n                }\n            },\n            handler: async (message, next) => {\n                const [name] = message.args as string[];\n\n                await message.client.botkit.options.permissionsEntity!.create({\n                    name,\n                    guild: message.guild.id,\n                    roles: [],\n                    members: [],\n                    grantedPermissions: [],\n                    negatedPermissions: []\n                })\n\n                const reply = await CommandUtils.runCommand(message, `mansget ${name}`);\n\n                if (reply.reply) {\n                    await message.reply(...reply.reply);\n                } else {\n                    return next(new CommandError({\n                        message: \"An error occurred while making the permission set.\",\n                        title: \"Unknown Error\"\n                    }));\n                }\n            }\n        },\n        {\n            opts: {\n                name: \"manslist\",\n                node: \"perm.read\"\n            },\n            handler: async (message, next) => {\n                const sets = await message.client.botkit.options.permissionsEntity!.find({ guild: message.guild.id });\n\n                const setList = sets.map(set => `\\`${set.name}\\``).sort().join(\"\\n\");\n\n                const embed = new RichEmbed();\n\n                embed.addField(\"Guild\", `${message.guild.name} (${message.guild.id})`);\n                embed.addField(\"Permission Sets\", fallbackStr(setList, \"None\"));\n                embed.setTitle(\"Permission Set Overview\");\n\n                await message.reply(embed);\n            }\n        },\n        {\n            opts: {\n                name: \"mansdel\",\n                node: \"perm.write\",\n                usage: {\n                    description: \"Delete a permission set\",\n                    args: [\n                        {\n                            type: \"string\",\n                            name: \"names\",\n                            required: true,\n                            unlimited: true\n                        }\n                    ]\n                }\n            },\n            handler: async (message, next) => {\n                const permSetNames = message.args as string[];\n                \n                await Promise.all(permSetNames.map(name => message.client.botkit.options.permissionsEntity!.findOne({name, guild: message.guild.id})).map(permSet => permSet.then(set => set as any && set!.remove())));\n\n                await message.success();\n            }\n        },\n        {\n            opts: {\n                name: \"manuget\",\n                node: \"perm.read\",\n                usage: {\n                    description: \"Get information on a user's permissions\",\n                    args: [\n                        {\n                            type: \"member\",\n                            name: \"user to get\",\n                            required: true\n                        }\n                    ]\n                }\n            },\n            handler: async (message, next) => {\n                const [member] = message.args as GuildMember[];\n\n                const sets = await message.client.botkit.options.permissionsEntity!.createQueryBuilder()\n                                .where(\"members @> :member\", { member: [member.id] })\n                                .andWhere(\"guild = :guild\", { guild: message.guild.id })\n                                .getMany();\n\n                const embed = createPermissionDepictionEmbed(sets, member);\n                embed.setTitle(\"Member Permissions Profile\");\n\n                await message.reply(embed);\n            }\n        },\n        // manulist\n        MemberRoleListGenerator(\"members\"),\n        // manrlist\n        MemberRoleListGenerator(\"roles\"),\n        {\n            opts: {\n                name: \"manrget\",\n                node: \"perm.read\",\n                usage: {\n                    description: \"Get information on a role's permissions\",\n                    args: [\n                        {\n                            type: \"role\",\n                            name: \"role to get\",\n                            required: true\n                        }\n                    ]\n                }\n            },\n            handler: async (message, next) => {\n                const [role] = message.args as Role[];\n\n                const sets = await message.client.botkit.options.permissionsEntity!.createQueryBuilder()\n                                .where(\"roles @> :roles\", { roles: [role.id] })\n                                .getMany();\n\n                const embed = createPermissionDepictionEmbed(sets, role);\n                embed.setTitle(\"Role Permissions Profile\");\n\n                await message.reply(embed);\n            }\n        },\n        // manuadd\n        membershipStateGenerator(\"member\", \"add\"),\n        // manudel\n        membershipStateGenerator(\"member\", \"del\"),\n        // manradd\n        membershipStateGenerator(\"role\", \"add\"),\n        // manrdel\n        membershipStateGenerator(\"role\", \"del\"),\n        // manpadd\n        PermissionStateGenerator(\"add\"),\n        // manpdel\n        PermissionStateGenerator(\"del\")\n    ]\n}"]}