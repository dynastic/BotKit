{"version":3,"file":"permissions-logic.test.js","sourceRoot":"./src/","sources":["tests/core/permissions-logic.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'mocha';\n\nimport chai, { expect, assert } from 'chai';\nimport { segmentNode, nodesSatisfy } from '../../src/commands/permissions/util';\n\nfunction generateNode(length: number = 3) {\n    const generateSegment = () => Math.random().toString(36).replace('0.', '').substring(0, 4);\n\n    const segments: string[] = [];\n\n    for (let i = 0; i < length; i++) segments.push(generateSegment());\n\n    return segments.join(\".\");\n}\n\nfunction generateNodes(number: number = 2, length?: number) {\n    const nodes: string[] = [];\n\n    for (let i = 0; i < number; i++) nodes.push(generateNode(length));\n\n    return nodes;\n}\n\nfunction generateNodePairs(number: number = 2, length?: number, identical: boolean = false) {\n    const nodePairs: string[][] = [];\n\n    for (let i = 0; i < number; i++) nodePairs.push(identical ? generateNodes(2, length).map((_, i, a) => a[0]) : generateNodes(2, length));\n\n    return nodePairs;\n}\n\ndescribe(\"satisfying nodes\", () => {\n    it(\"should accept wildcards at any level\", () => {\n        const sampleNode = generateNode(3);\n        const nodeSegments = segmentNode(sampleNode);\n        const wildcards = nodeSegments.slice(0, nodeSegments.length - 1).map(node => node + \".*\");\n        \n        wildcards.forEach(wildcard => assert(nodesSatisfy(sampleNode, wildcard), `${wildcard} should've satisfied ${sampleNode}, but doesn't`));\n    });\n\n    it(\"should reject wildcards that are below the node\", () => {\n        const sampleNode = generateNode(3);\n        const wildcardNode = sampleNode + \".*\";\n\n        assert(!nodesSatisfy(sampleNode, wildcardNode), `${wildcardNode} should not have satisfied ${sampleNode}, but it does`);\n    });\n\n    it(\"should reject inequal nodes\", () => {\n        const nodes = generateNodePairs(50, 3);\n\n        nodes.forEach(([node1, node2]) => assert(!nodesSatisfy(node1, node2), `${node1} should not have satisfied ${node2}, but it does`));\n    });\n\n    it(\"should accept equal nodes\", () => {\n        const node1 = generateNode(3);\n\n        assert(nodesSatisfy(node1, node1), `${node1} should have satisfied itself (${node1}), but it doesn't`)\n    });\n\n    it(\"should not accept higher-level nodes without a wildcard (a.b NOT SATISFY a.b.c)\", () => {\n        const node1 = generateNode(3);\n        const node2 = node1 + \".\" + generateNode(3);\n\n        assert(!nodesSatisfy(node1, node2), `${node1} should not have satisfied ${node2}, but it does`);\n    });\n});"]}