{"version":3,"file":"permissions-features.test.js","sourceRoot":"./src/","sources":["tests/core/permissions-features.test.ts"],"names":[],"mappings":";;AAAA,iBAAe;AAGf,8DAA2F;AAE3F,+BAA4C;AAE5C,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC7B,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC7C,IAAI,IAAI,CAAC;QACT,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,2BAAoB,CAAC,qBAAqB,EAAE,EAAE,2BAAoB,CAAC,qBAAqB,EAAE,CAAC,CAAC;QAEzH,MAAM,SAAS,GAAG,qBAAc,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAE9D,aAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,iDAAiD,CAAC,CAAC;QAClJ,aAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,iDAAiD,CAAC,CAAC;QAClJ,aAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,iDAAiD,CAAC,CAAC;QAClJ,aAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,iDAAiD,CAAC,CAAC;IACtJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACrD,IAAI,IAAI,CAAC;QACT,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,2BAAoB,CAAC,qBAAqB,EAAE,EAAE,2BAAoB,CAAC,qBAAqB,EAAE,CAAC,CAAC;QAEzH,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAC7E,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAE7E,MAAM,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAEzF,MAAM,SAAS,GAAG,qBAAc,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAE9D,aAAM,CAAC,qBAAc,CAAC,gBAAgB,CAAC,YAAY,EAAE,SAAS,CAAC,EAAE,0DAA0D,CAAC,CAAC;QAC7H,aAAM,CAAC,qBAAc,CAAC,gBAAgB,CAAC,YAAY,EAAE,SAAS,CAAC,EAAE,0DAA0D,CAAC,CAAC;QAC7H,aAAM,CAAC,qBAAc,CAAC,gBAAgB,CAAC,YAAY,EAAE,SAAS,CAAC,KAAK,KAAK,EAAE,oFAAoF,CAAC,CAAC;QACjK,aAAM,CAAC,qBAAc,CAAC,gBAAgB,CAAC,YAAY,EAAE,SAAS,CAAC,KAAK,KAAK,EAAE,oFAAoF,CAAC,CAAC;IACrK,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import 'mocha';\n\nimport { PermissionSet } from \"../../src/commands/permissions/types\";\nimport { _PermissionInternals, PermissionsAPI } from \"../../src/commands/permissions/util\";\n\nimport chai, { expect, assert } from 'chai';\n\ndescribe(\"permissions api\", () => {\n    it(\"should properly create composite sets\", () => {\n        let sets;\n        const [set1, set2] = sets = [_PermissionInternals.generatePermissionSet(), _PermissionInternals.generatePermissionSet()];\n\n        const composite = PermissionsAPI.compositePermissionSet(sets);\n\n        assert(set1.grantedPermissions.every(perm => composite.grantedPermissions.indexOf(perm) > -1), `composite did not contain granted entry in set1`);\n        assert(set1.negatedPermissions.every(perm => composite.negatedPermissions.indexOf(perm) > -1), 'composite did not contain negated entry in set1');\n        assert(set2.grantedPermissions.every(perm => composite.grantedPermissions.indexOf(perm) > -1), 'composite did not contain granted entry in set2');\n        assert(set2.negatedPermissions.every(perm => composite.negatedPermissions.indexOf(perm) > -1), 'composite did not contain negated entry in set2');\n    });\n\n    it(\"should satisfy nodes with sets and composites\", () => {\n        let sets;\n        const [set1, set2] = sets = [_PermissionInternals.generatePermissionSet(), _PermissionInternals.generatePermissionSet()];\n\n        const negatedNode1 = set1.negatedPermissions[1] = set1.grantedPermissions[1];\n        const negatedNode2 = set2.negatedPermissions[1] = set2.grantedPermissions[1];\n\n        const [grantedNode1] = set1.grantedPermissions, [grantedNode2] = set2.grantedPermissions;\n\n        const composite = PermissionsAPI.compositePermissionSet(sets);\n\n        assert(PermissionsAPI.nodeSatisfiesSet(grantedNode1, composite), `set1's granted permissions did not satisfy the composite`);\n        assert(PermissionsAPI.nodeSatisfiesSet(grantedNode2, composite), `set2's granted permissions did not satisfy the composite`);\n        assert(PermissionsAPI.nodeSatisfiesSet(negatedNode1, composite) === false, `set1's negated permissions are satisfying the composite. this should never happen.`);\n        assert(PermissionsAPI.nodeSatisfiesSet(negatedNode2, composite) === false, `set2's negated permissions are satisfying the composite. this should never happen.`);\n    });\n});"]}