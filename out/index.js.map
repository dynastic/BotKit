{"version":3,"file":"index.js","sourceRoot":"./src/","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAkC;AAClC,uDAAyC;AACzC,0DAAuC;AAmCvC;;GAEG;AACH,MAAa,WAAW;IAIpB,YAA2B,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;QAClD,SAAS,CAAC,YAAY,CAAC;YACnB,cAAc,EAAE,OAAO,CAAC,cAAc;YACtC,mBAAmB,EAAE,OAAO,CAAC,mBAAmB;YAChD,KAAK,EAAE,OAAO,CAAC,KAAK;SACvB,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,IAAI;QACZ,IAAY,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,mBAAM,EAAE,CAAC;QAC3D,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;YAC7B,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC/C;QAEA,IAAY,CAAC,aAAa,GAAG,IAAI,kBAAa,CAAC,EAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,EAAE,IAAI,EAAC,CAAC,CAAC;QACvG,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;QAEhC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE;YAChC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC;gBAAE,OAAO;YACvE,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA9BD,kCA8BC;AAED,kBAAe,WAAW,CAAC;AAE3B,2CAAiD;AACjD,4BAAuB;AACvB,0BAAqB;AACrB,gCAA2B","sourcesContent":["import {Client} from \"discord.js\";\nimport * as Constants from \"./Constants\";\nimport CommandSystem from \"./commands\";\n\nexport interface RoleOptions {\n    moderator: string[];\n    admin: string[];\n    root: string[];\n}\n\nexport interface ApplicationOptions {\n    /**\n     * discord token. required unless you pass a client which has already been logged-in\n     */\n    token?: string;\n    /**\n     * discord client. if not passed, the application will create one.\n     */\n    client?: Client;\n    /**\n     * directory to load command files from\n     */\n    commandDirectory?: string;\n    /**\n     * message prefix for commands\n     */\n    COMMAND_PREFIX?: string;\n    /**\n     * whether to render errors in plaintext or embeds\n     */\n    ERROR_RENDER_FORMAT?: Constants.ErrorFormat;\n    /**\n     * permission roles\n     */\n    ROLES?: RoleOptions;\n}\n\n/**\n * Initializes the framework\n */\nexport class Application {\n    public readonly client: Client;\n    public readonly commandSystem: CommandSystem;\n\n    public constructor(private options: ApplicationOptions) {\n        Constants.applyPatches({\n            COMMAND_PREFIX: options.COMMAND_PREFIX,\n            ERROR_RENDER_FORMAT: options.ERROR_RENDER_FORMAT,\n            ROLES: options.ROLES\n        });\n    }\n\n    /**\n     * Sets the Discord client up and loads the command system\n     */\n    public async init(): Promise<void> {\n        (this as any).client = this.options.client || new Client();\n        this.client.botkit = this;\n        if (!this.client.readyTimestamp) {\n            await this.client.login(this.options.token);\n        }\n\n        (this as any).commandSystem = new CommandSystem({directory: this.options.commandDirectory, app: this});\n        await this.commandSystem.init();\n\n        this.client.on(\"message\", message => {\n            if (!message.cleanContent.startsWith(Constants.COMMAND_PREFIX)) return;\n            this.commandSystem.executeCommand(message);\n        });\n    }\n}\n\nexport default Application;\n\nexport import Constants = require(\"./Constants\");\nexport * from \"./util\";\nexport * from \"./db\";\nexport * from \"./commands\";"]}