{"version":3,"file":"index.js","sourceRoot":"./src/","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,4BAA0B;AAE1B,2CAAoC;AACpC,uDAAyC;AACzC,0DAAoE;AAmEpE;;GAEG;AACH,MAAa,WAAW;IAIpB,YAA0B,OAA8B;QAA9B,YAAO,GAAP,OAAO,CAAuB;QACpD,SAAS,CAAC,YAAY,CAAC;YACnB,cAAc,EAAE,OAAO,CAAC,cAAc;YACtC,mBAAmB,EAAE,OAAO,CAAC,mBAAmB;YAChD,KAAK,EAAE,OAAO,CAAC,KAAK;SACvB,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,IAAI;QACZ,IAAY,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,mBAAM,EAAE,CAAC;QAC3D,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;YAC7B,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC/C;QAEA,IAAY,CAAC,aAAa,GAAG,IAAI,kBAAa,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,sBAAsB,EAAE,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC,CAAC;QACnN,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IACpC,CAAC;CACJ;AAzBD,kCAyBC;AAED,kBAAe,WAAW,CAAC;AAE3B,2CAAiD;AAGjD,4BAAuB;AACvB,0BAAqB;AACrB,gCAA2B","sourcesContent":["import \"./node-additions\";\n\nimport { Client } from \"discord.js\";\nimport * as Constants from \"./Constants\";\nimport CommandSystem, { PermissionSetEntityStub } from \"./commands\";\n\nexport interface RoleOptions {\n    moderator: string[];\n    admin: string[];\n    root: string[];\n}\n\nexport interface ApplicationOptions<T extends PermissionSetEntityStub> {\n    /**\n     * discord token. required unless you pass a client which has already been logged-in\n     */\n    token?: string;\n    /**\n     * discord client. if not passed, the application will create one.\n     */\n    client?: Client;\n    /**\n     * directory to load command files from\n     */\n    commandDirectory?: string;\n    /**\n     * whether or not command categories should default to their parent folder name.\n     * default is false\n     */\n    automaticCategoryNames?: boolean;\n    /**\n     * message prefix for commands\n     */\n    COMMAND_PREFIX?: string;\n    /**\n     * whether to render errors in plaintext or embeds\n     */\n    ERROR_RENDER_FORMAT?: Constants.ErrorFormat;\n    /**\n     * permission roles\n     */\n    ROLES?: RoleOptions;\n    /**\n     * Commands to exclude from bot loading\n     */\n    preloadExclude?: string[];\n    /**\n     * Function that adds additional variables to eval contexts\n     */\n    contextPopulator?: (context: Context) => Context\n    /**\n     * The permissions entity that BotKit should query to determine command accessibility\n     */\n    permissionsEntity?: T;\n    /**\n     * The reference to the superusers on this instance\n     */\n    superuserCheck?: SuperuserCheck;\n    /**\n     * Advanced overrides. Do not modify things without knowing what they do.\n     */\n    overrides?: {\n        commandSystem?: {\n            features?: {\n                nodeBasedPermissions?: false;\n                superuserPermissions?: false;\n            }\n        }\n    }\n}\n\n/**\n * Initializes the framework\n */\nexport class Application<T extends PermissionSetEntityStub = PermissionSetEntityStub> {\n    public readonly client: Client;\n    public readonly commandSystem: CommandSystem;\n\n    public constructor(public options: ApplicationOptions<T>) {\n        Constants.applyPatches({\n            COMMAND_PREFIX: options.COMMAND_PREFIX,\n            ERROR_RENDER_FORMAT: options.ERROR_RENDER_FORMAT,\n            ROLES: options.ROLES\n        });\n    }\n\n    /**\n     * Sets the Discord client up and loads the command system\n     */\n    public async init(): Promise<void> {\n        (this as any).client = this.options.client || new Client();\n        this.client.botkit = this;\n        if (!this.client.readyTimestamp) {\n            await this.client.login(this.options.token);\n        }\n\n        (this as any).commandSystem = new CommandSystem({ directory: this.options.commandDirectory, app: this, preloadExclude: this.options.preloadExclude, automaticCategoryNames: this.options.automaticCategoryNames });\n        await this.commandSystem.init();\n    }\n}\n\nexport default Application;\n\nexport import Constants = require(\"./Constants\");\nimport { Context } from \"./commands/commands\";\nimport { SuperuserCheck } from \"./commands/guards/superuser\";\nexport * from \"./util\";\nexport * from \"./db\";\nexport * from \"./commands\";"]}