{"version":3,"file":"index.js","sourceRoot":"./src/","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAkC;AAClC,uDAAyC;AACzC,0DAAuC;AAgBvC,MAAqB,WAAW;IAM5B,YAA2B,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;QAF/C,SAAI,GAAyB,EAAE,CAAC;QAGnC,SAAS,CAAC,YAAY,CAAC,OAAc,CAAC,CAAC;IAC3C,CAAC;IAEM,KAAK,CAAC,IAAI;QACZ,IAAY,CAAC,MAAM,GAAG,IAAI,mBAAM,EAAE,CAAC;QACpC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;QAC1B,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE3C,IAAY,CAAC,aAAa,GAAG,IAAI,kBAAa,CAAC,EAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAC,CAAC,CAAC;QAClI,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;QAEhC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE;YAChC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC;gBAAE,OAAO;YACvE,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAvBD,8BAuBC;AAED,iCAA4B;AAC5B,4BAAuB;AACvB,0BAAqB;AACrB,gCAA2B","sourcesContent":["import {Client} from \"discord.js\";\nimport * as Constants from \"./Constants\";\nimport CommandSystem from \"./commands\";\n\nexport interface RoleOptions {\n    moderator: string[];\n    admin: string[];\n    root: string[];\n}\n\nexport interface ApplicationOptions {\n    token: string;\n    commandDirectory: string;\n    commandPrefix?: string;\n    errorFormat?: Constants.ErrorFormat;\n    roles: RoleOptions;\n}\n\nexport default class Application {\n    public readonly client: Client;\n    public readonly commandSystem: CommandSystem;\n\n    public data: {[key: string]: any} = {};\n\n    public constructor(private options: ApplicationOptions) {\n        Constants.applyPatches(options as any);\n    }\n\n    public async init(): Promise<void> {\n        (this as any).client = new Client();\n        this.client.botkit = this;\n        await this.client.login(this.options.token);\n\n        (this as any).commandSystem = new CommandSystem({directory: this.options.commandDirectory, app: this, roles: this.options.roles});\n        await this.commandSystem.init();\n\n        this.client.on(\"message\", message => {\n            if (!message.cleanContent.startsWith(Constants.COMMAND_PREFIX)) return;\n            this.commandSystem.executeCommand(message);\n        });\n    }\n}\n\nexport * from \"./Constants\";\nexport * from \"./util\";\nexport * from \"./db\";\nexport * from \"./commands\";"]}